// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CGen.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using DatabaseSchemaReader.DataSchema;
    using DatabaseSchemaReader;
    using CGen.Extensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class DALTemplate : DALTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing S" +
                    "ystem.Data.SqlClient;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing Dapper;\r\n\r\n" +
                    "using ");
            
            #line 19 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_settings.ProjectNamespace));
            
            #line default
            #line hidden
            this.Write(".Base;\r\nusing ");
            
            #line 20 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_settings.ProjectNamespace));
            
            #line default
            #line hidden
            this.Write(".Filters;\r\nusing ");
            
            #line 21 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_settings.ProjectNamespace));
            
            #line default
            #line hidden
            this.Write(".Filters.Base;\r\nusing ");
            
            #line 22 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_settings.ProjectNamespace));
            
            #line default
            #line hidden
            this.Write(".Objects;\r\n\r\nnamespace ");
            
            #line 24 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_settings.ProjectNamespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\tnamespace Base\r\n    {\r\n\t\tinternal class ObjectCache\r\n        {\r\n           " +
                    " private static readonly List<TableItem> Cache = new List<TableItem>();\r\n\r\n     " +
                    "       internal static T Get<T>(string tableName, string primaryKeyValue) where " +
                    "T:class\r\n            {\r\n                var table = Cache.FirstOrDefault(c => c." +
                    "TableName == tableName);\r\n                var selected = table?.Items.FirstOrDef" +
                    "ault(c => c.PrimayKeyValue == primaryKeyValue);\r\n                return selected" +
                    "?.Object as T;\r\n            }\r\n\r\n            internal static void Add(string tab" +
                    "leName, string primaryKeyValue, ObjectBase obj)\r\n            {\r\n                " +
                    "var table = Cache.FirstOrDefault(c => c.TableName == tableName) ?? new TableItem" +
                    "();\r\n                var ob = table.Items.FirstOrDefault(p => p.PrimayKeyValue =" +
                    "= primaryKeyValue);\r\n                ob?.Object.Copy(obj);\r\n            }\r\n\r\n   " +
                    "         private class TableItem\r\n            {\r\n                public TableIte" +
                    "m()\r\n                {\r\n                    Items = new List<Item>();\r\n         " +
                    "       }\r\n\r\n                public string TableName { get; set; }\r\n             " +
                    "   public List<Item> Items { get; set; }\r\n            }\r\n\r\n            private c" +
                    "lass Item\r\n            {\r\n                public string PrimayKeyValue { get; se" +
                    "t; }\r\n                public ObjectBase Object { get; set; }\r\n            }\r\n   " +
                    "     }\r\n\r\n\t\tinternal class DatabaseConnectionManager\r\n        {\r\n            #re" +
                    "gion Fields\r\n\r\n            private readonly static HashSet<TestingDataAccessCont" +
                    "ext> ContextsThatGotTheConnection = new HashSet<TestingDataAccessContext>();\r\n  " +
                    "          private static IDbConnection _connection;\r\n\r\n            #endregion\r\n\r" +
                    "\n            #region Internal Methods\r\n\r\n            internal static IDbConnecti" +
                    "on GetConnection(TestingDataAccessContext context)\r\n            {\r\n             " +
                    "   if (_connection == null)\r\n                {\r\n                    var connecct" +
                    "ionstring = ConfigurationManager.ConnectionStrings[\"");
            
            #line 79 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_settings.ProjectName));
            
            #line default
            #line hidden
            this.Write("Connection\"].ConnectionString;\r\n                    if (string.IsNullOrWhiteSpace" +
                    "(connecctionstring))\r\n                        throw new Exception(\"Cannot Create" +
                    " Connection because the connection string is not present in the application conf" +
                    "iguration \");\r\n                    _connection = new SqlConnection(connecctionst" +
                    "ring);\r\n                }\r\n\r\n                if(_connection.State != ConnectionS" +
                    "tate.Open)\r\n                    _connection.Open();\r\n\r\n                ContextsT" +
                    "hatGotTheConnection.Add(context);\r\n                return _connection;\r\n        " +
                    "    }\r\n\r\n            internal static void IamDisposing(TestingDataAccessContext " +
                    "context)\r\n            {\r\n                ContextsThatGotTheConnection.Remove(con" +
                    "text);\r\n                if (ContextsThatGotTheConnection.Count >= 1 || _connecti" +
                    "on.State == ConnectionState.Closed)\r\n                    return;\r\n              " +
                    "  _connection.Close();\r\n            }\r\n\r\n            internal static TestingData" +
                    "AccessContext GetLastContext()\r\n            {\r\n                if(ContextsThatGo" +
                    "tTheConnection.Count<1)\r\n                    throw new Exception(\"Context not cr" +
                    "eated\");\r\n                return ContextsThatGotTheConnection.Last();\r\n         " +
                    "   }\r\n\r\n            #endregion\r\n        }\r\n\r\n\t\t/// <summary>\r\n        /// Provid" +
                    "es an interface to access database \r\n        /// should be placed inside an usin" +
                    "g block\r\n        /// </summary>\r\n        public class TestingDataAccessContext :" +
                    " IDisposable\r\n        {\r\n            #region Fields\r\n\r\n            private IDbCo" +
                    "nnection _connection;\r\n\r\n            #endregion\r\n\r\n            #region Construct" +
                    "ors\r\n\r\n            /// <summary>\r\n            /// Creates new context\r\n         " +
                    "   /// </summary>\r\n            public TestingDataAccessContext()\r\n            {\r" +
                    "\n                var fromConnectionMager = DatabaseConnectionManager.GetConnecti" +
                    "on(this);\r\n                _connection = fromConnectionMager;\r\n            }\r\n\r\n" +
                    "            #endregion\r\n\r\n            #region Methods\r\n\r\n            internal T " +
                    "Get<T>(string tableName, string primaryKeyName, object primaryKeyValue) where T:" +
                    "  ObjectBase\r\n            {\r\n                var fromCache = ObjectCache.Get<T>(" +
                    "tableName, primaryKeyValue.ToString());\r\n                if (fromCache != null)\r" +
                    "\n                    return fromCache;\r\n                const string query = @\"S" +
                    "ELECT TOP 1\r\n                                    *\r\n                            " +
                    "    FROM [dbo].[{0}]\r\n                                WHERE [{1}] = \'{2}\';\";\r\n  " +
                    "              var item = _connection.QueryFirstOrDefault<T>(\r\n                  " +
                    "  string.Format(query, tableName, primaryKeyName, primaryKeyValue)\r\n            " +
                    "        );\r\n\r\n\r\n                if (item == null)\r\n                    return nu" +
                    "ll;\r\n                new List<string>().ForEach(s => s.ToLower());\r\n            " +
                    "    ObjectCache.Add(tableName,primaryKeyValue.ToString(),item);\r\n               " +
                    " return item;\r\n            }\r\n\r\n            internal List<T> Get<T>(string table" +
                    "Name, Stack<Filter> filters, int limit)\r\n            {\r\n                var wher" +
                    "eBuilder = new StringBuilder(\"\");\r\n                var orderByBuilder = new Stri" +
                    "ngBuilder(\"\");\r\n\r\n                while (filters.Count > 0)\r\n                {\r\n" +
                    "                    var filter = filters.Pop();\r\n                    if (filter " +
                    "is ValueFilter)\r\n                    {\r\n                        var stringFilter" +
                    " = filter as ValueFilter;\r\n                        var attribute = stringFilter." +
                    "FilteredAttribute;\r\n\r\n                        var expressions = stringFilter.Exp" +
                    "ressions;\r\n                        foreach (var expression in expressions)\r\n    " +
                    "                    {\r\n                            if (expression.Type == Expres" +
                    "sionType.OrderByThis)\r\n                            {\r\n                          " +
                    "      var singleValuedExpression = expression as SingleValuedExpression;\r\n      " +
                    "                          if (singleValuedExpression != null)\r\n                 " +
                    "                   orderByBuilder.Append(orderByBuilder.Length < 1 ? \"\": \",\" + a" +
                    "ttribute + \" \" +\r\n                                                          sing" +
                    "leValuedExpression.Value);\r\n                            }\r\n                     " +
                    "       else\r\n                                whereBuilder.Append(expression.GetE" +
                    "xpressionText(attribute));\r\n                        }\r\n                    }\r\n  " +
                    "                  else if (filter is OrFilter)\r\n                        whereBui" +
                    "lder.Append(\" OR \");\r\n                }\r\n\r\n                var limitString = \"\";" +
                    "\r\n                if (limit > 0)\r\n                    limitString = \"TOP \" + lim" +
                    "it;\r\n\r\n                var query = string.Format(@\" SELECT {0} * \r\n             " +
                    "                 FROM [{1}]\r\n                              {2} {3}\", limitString" +
                    ", tableName, whereBuilder.Length > 0 ? \" WHERE \" + whereBuilder:\"\", orderByBuild" +
                    "er.Length > 0 ? \" ORDER BY \"+orderByBuilder:\"\");\r\n\r\n                return _conn" +
                    "ection.Query<T>(query).ToList();\r\n            } \r\n\r\n            public void Disp" +
                    "ose()\r\n            {\r\n                DatabaseConnectionManager.IamDisposing(thi" +
                    "s);\r\n            }\r\n\r\n            #endregion\r\n        }\r\n\t}\r\n\r\n\t");
            
            #line 209 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
 
	var databaseReader = new DatabaseReader(_settings.ConnectionString, "System.Data.SqlClient");
	var schema = databaseReader.ReadAll();
	
            
            #line default
            #line hidden
            this.Write(@"
	namespace Objects
    {
	    public abstract class ObjectBase
        {
            protected TestingDataAccessContext DALObjectBaseContext;
            internal ObjectState State { get; set; }

            internal virtual void Copy(ObjectBase obj)
            {
                
            }
        }

		public enum ObjectState
        {
            Normal =1,
            InDatabase =2,
            Deleted = 3
        }

		");
            
            #line 234 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
 foreach(var table in schema.Tables) {
            
            #line default
            #line hidden
            this.Write("\t\tpublic class ");
            
            #line 235 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(" : ObjectBase\r\n        {\r\n\t\t\t");
            
            #line 237 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"

			var forignKeyColumns = table.Columns.Where(c => c.IsForeignKey).ToList();
			
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t");
            
            #line 241 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
foreach(var column in table.Columns){
            
            #line default
            #line hidden
            this.Write("\t\t\tprivate ");
            
            #line 242 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.GetDataType(true)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 242 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.GetFieldName(true)));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t");
            
            #line 243 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t");
            
            #line 245 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
foreach(var column in forignKeyColumns){
            
            #line default
            #line hidden
            this.Write("\t\t\tprivate ");
            
            #line 246 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.GetDataType(false)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 246 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.GetFieldName(false)));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t");
            
            #line 247 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\t\t\t");
            
            #line 250 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
foreach(var column in table.Columns){
            
            #line default
            #line hidden
            this.Write("\t\t\tpublic ");
            
            #line 251 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.GetDataType(true)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 251 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write(" { get; set; } \r\n\t\t\t");
            
            #line 252 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t");
            
            #line 254 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
foreach(var column in forignKeyColumns){
            
            #line default
            #line hidden
            this.Write("\t\t\tpublic ");
            
            #line 255 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.GetDataType(false)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 255 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("Obj"+column.Name));
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t{ \r\n\t\t\t\tget\r\n\t\t\t\t{\r\n\t\t\t\t\treturn ");
            
            #line 259 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.GetFieldName(true)));
            
            #line default
            #line hidden
            this.Write(" ?? (");
            
            #line 259 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.GetFieldName(true)));
            
            #line default
            #line hidden
            this.Write(" = DALObjectBaseContext.Get<");
            
            #line 259 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ForeignKeyTable.Name));
            
            #line default
            #line hidden
            this.Write(">(\"");
            
            #line 259 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ForeignKeyTable.Name));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 259 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ForeignKeyTable.PrimaryKeyColumn.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 259 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ForeignKeyTable.Name));
            
            #line default
            #line hidden
            this.Write("));\r\n\t\t\t\t}\r\n\t\t\t\tset\r\n\t\t\t\t{\r\n\t\t\t\t\t//to be added\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\t");
            
            #line 266 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n            /// <summary>\r\n            /// Creates new ");
            
            #line 269 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(" object using latest context \r\n            /// </summary>\r\n            public ");
            
            #line 271 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("()\r\n            {\r\n                DALObjectBaseContext = DatabaseConnectionManag" +
                    "er.GetLastContext();\r\n            }\r\n\r\n\t\t\t");
            
            #line 276 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
DatabaseColumn primaryKeyColumn = null ;
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 277 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
if(table.PrimaryKeyColumn != null){
            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 278 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
primaryKeyColumn = table.PrimaryKeyColumn;
            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 279 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
var key = primaryKeyColumn.Name.FirstCharLower();
            
            #line default
            #line hidden
            this.Write("\t\t\tpublic static ");
            
            #line 280 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(" Get(");
            
            #line 280 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(primaryKeyColumn.DataType.NetDataTypeCSharpName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 280 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(key));
            
            #line default
            #line hidden
            this.Write(")\r\n            {\r\n                var context = DatabaseConnectionManager.GetLast" +
                    "Context();\r\n\t\t\t\tif(context==null)\r\n\t\t\t\t\treturn null;\r\n\r\n                var obj " +
                    "= context.Get<");
            
            #line 286 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(">(\"");
            
            #line 286 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 286 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(primaryKeyColumn.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 286 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(key));
            
            #line default
            #line hidden
            this.Write(");\r\n                obj.State = ObjectState.InDatabase;\r\n                return o" +
                    "bj;\r\n            }\r\n\t\t\t");
            
            #line 290 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("           \r\n\r\n            public static ");
            
            #line 293 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("Filter Get()\r\n            {\r\n                return new ");
            
            #line 295 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("Filter();\r\n            }\r\n\r\n\t\t\t");
            
            #line 298 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
var tableNameFirstCharLower= table.Name.FirstCharLower();
            
            #line default
            #line hidden
            this.Write("            public static void Delete(");
            
            #line 299 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 299 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableNameFirstCharLower));
            
            #line default
            #line hidden
            this.Write("ToDelete)\r\n            {\r\n\t\t\t\t//to be implemented\r\n            }\r\n\r\n            i" +
                    "nternal static List<");
            
            #line 304 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("> Filter(Stack<Filter> filters,int limit)\r\n            {\r\n                var con" +
                    "text = DatabaseConnectionManager.GetLastContext();\r\n                var objects " +
                    "= context.Get<");
            
            #line 307 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write(">(\"");
            
            #line 307 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("\",filters,limit);\r\n                foreach (var obj in objects)\r\n                " +
                    "    ObjectCache.Add(\"");
            
            #line 309 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            
            #line default
            #line hidden
            this.Write("\",obj.");
            
            #line 309 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(primaryKeyColumn.Name));
            
            #line default
            #line hidden
            this.Write(".ToString(),obj);\r\n                return objects;\r\n            } \r\n        }\t\r\n\t" +
                    "\t");
            
            #line 313 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
}/*for each table*/
            
            #line default
            #line hidden
            this.Write("\r\n\t}\r\n\tnamespace Filters\r\n    {\r\n\t\tnamespace Base\r\n        {\r\n\t\t    internal enum" +
                    " ExpressionType\r\n            {\r\n                StartsWith = 1,\r\n               " +
                    " EndsWith = 2,\r\n                Contains = 3,\r\n                EqualsTo = 4,\r\n  " +
                    "              LessThan = 5,\r\n                GraterThan = 6,\r\n                Be" +
                    "tween = 7,\r\n                In = 8,\r\n                Or = 9,\r\n                An" +
                    "d = 10,\r\n                OrderByThis = 11\r\n            }\r\n\r\n            internal" +
                    " class Expression\r\n            {\r\n                public ExpressionType Type { g" +
                    "et; set; }\r\n\r\n                internal virtual string GetExpressionText(string a" +
                    "ttributeName)\r\n                {\r\n                    switch (Type)\r\n           " +
                    "         {\r\n                         case ExpressionType.Or:\r\n                  " +
                    "          return \" OR \";\r\n                        case ExpressionType.And:\r\n    " +
                    "                        return \" AND \";\r\n                        default:\r\n     " +
                    "                       return \"\";\r\n                    }\r\n                }\r\n   " +
                    "         }\r\n\r\n            internal class SingleValuedExpression : Expression\r\n  " +
                    "          {\r\n                public object Value { get; set; }\r\n\r\n              " +
                    "  internal override string GetExpressionText(string attributeName)\r\n            " +
                    "    {\r\n                    switch (Type)\r\n                    {\r\n               " +
                    "         case ExpressionType.StartsWith:\r\n                            return \" [" +
                    "\" + attributeName + \"] LIKE \'\" + Value + \"%\' \";\r\n                        case Ex" +
                    "pressionType.EndsWith:\r\n                            return \" [\" + attributeName " +
                    "+ \"] LIKE \'%\" + Value + \"\' \";\r\n                        case ExpressionType.Conta" +
                    "ins:\r\n                            return \" [\" + attributeName + \"] LIKE \'%\" + Va" +
                    "lue + \"%\' \";\r\n                        case ExpressionType.EqualsTo:\r\n           " +
                    "                 return \" [\" + attributeName + \"] = \'\" + Value + \"\' \";\r\n        " +
                    "                case ExpressionType.GraterThan:\r\n                            ret" +
                    "urn \" [\" + attributeName + \"] > \'\" + Value + \"\' \";\r\n                        case" +
                    " ExpressionType.LessThan:\r\n                            return \" [\" + attributeNa" +
                    "me + \"] < \'\" + Value + \"\' \";\r\n                        default:\r\n                " +
                    "            return \"\";\r\n                    }\r\n                }\r\n            }\r" +
                    "\n\r\n            internal class MultiValuedExpression : Expression\r\n            {\r" +
                    "\n                public List<object> Values { get; set; }\r\n\r\n                int" +
                    "ernal override string GetExpressionText(string attributeName)\r\n                {" +
                    "\r\n                    switch (Type)\r\n                    {\r\n                    " +
                    "    case ExpressionType.Between:\r\n                            return \" [\" + attr" +
                    "ibuteName + \"] BETWEEN \'\" + Values[0] + \"\' AND \'\"+Values[1]+\"\' \";\r\n             " +
                    "           case ExpressionType.In:\r\n                            return \" [\" + at" +
                    "tributeName + \"] IN(\" + Values.Aggregate((c, n) => c + \"\'\" + n + \"\'\") + \") \";\r\n " +
                    "                       default:\r\n                            return \"\";\r\n       " +
                    "             }\r\n                }\r\n            }\r\n\r\n            public class Fil" +
                    "ter\r\n            {\r\n                \r\n            }\r\n\r\n            public class " +
                    "ValueFilter : Filter\r\n            {\r\n                internal Stack<Expression> " +
                    "Expressions;\r\n                internal string FilteredAttribute;\r\n            }\r" +
                    "\n\r\n            public class OrFilter : Filter\r\n            {\r\n                \r\n" +
                    "            }\r\n\r\n            public class AndFilter : Filter\r\n            {\r\n   " +
                    "             \r\n            }\r\n\r\n            public class StringFilter<T> : Value" +
                    "Filter\r\n            {\r\n                internal StringFilter(T parent,string fil" +
                    "teredAttribute)\r\n                {\r\n                    Parent = parent;\r\n      " +
                    "              Expressions = new Stack<Expression>();\r\n                    Filter" +
                    "edAttribute = filteredAttribute;\r\n                } \r\n\r\n                public S" +
                    "tringFilter<T> StartsWith(string str)\r\n                {\r\n                    va" +
                    "r expression = new SingleValuedExpression {Type = ExpressionType.StartsWith, Val" +
                    "ue = str};\r\n                    if(Expressions.Count>0 && Expressions.Peek().Typ" +
                    "e!=ExpressionType.Or)\r\n                        Expressions.Push(new Expression {" +
                    "Type = ExpressionType.And});\r\n                    Expressions.Push(expression);\r" +
                    "\n                    return this;\r\n                }\r\n\r\n                public S" +
                    "tringFilter<T> EndsWith(string str)\r\n                {\r\n                    var " +
                    "expression = new SingleValuedExpression { Type = ExpressionType.EndsWith, Value " +
                    "= str };\r\n                    if (Expressions.Count > 0 && Expressions.Peek().Ty" +
                    "pe != ExpressionType.Or)\r\n                        Expressions.Push(new Expressio" +
                    "n { Type = ExpressionType.And });\r\n                    Expressions.Push(expressi" +
                    "on);\r\n                    return this;\r\n                }\r\n\r\n                pub" +
                    "lic StringFilter<T> Contains(string str)\r\n                {\r\n                   " +
                    " var expression = new SingleValuedExpression { Type = ExpressionType.Contains, V" +
                    "alue = str };\r\n                    if (Expressions.Count > 0 && Expressions.Peek" +
                    "().Type != ExpressionType.Or)\r\n                        Expressions.Push(new Expr" +
                    "ession { Type = ExpressionType.And });\r\n                    Expressions.Push(exp" +
                    "ression);\r\n                    return this;\r\n                }\r\n\r\n              " +
                    "  public StringFilter<T> Or\r\n                {\r\n                    get\r\n       " +
                    "             {\r\n                        if (Expressions.Peek().Type == Expressio" +
                    "nType.Or)\r\n                            return this;\r\n                        Exp" +
                    "ressions.Push(new Expression {Type = ExpressionType.Or});\r\n                     " +
                    "   return this;\r\n                    }\r\n                }\r\n\r\n                pub" +
                    "lic StringFilter<T> OrderByThis()\r\n                {\r\n                    Expres" +
                    "sions.Push(new Expression { Type = ExpressionType.LessThan });\r\n                " +
                    "    return this;\r\n                }\r\n                \r\n                public T " +
                    "Parent { get; }\r\n            }\r\n\r\n            public class NumberFilter<TP,T>: V" +
                    "alueFilter\r\n            {\r\n                internal NumberFilter(TP parent,strin" +
                    "g filteredAttribute)\r\n                {\r\n                    Parent = parent;\r\n " +
                    "                   Expressions = new Stack<Expression>();\r\n                    F" +
                    "ilteredAttribute = filteredAttribute;\r\n                }\r\n\r\n                publ" +
                    "ic NumberFilter<TP, T> Is(T equal)\r\n                {\r\n                    if (E" +
                    "xpressions.Count > 0 && Expressions.Peek().Type != ExpressionType.Or)\r\n         " +
                    "               Expressions.Push(new Expression {Type = ExpressionType.And});\r\n  " +
                    "                  Expressions.Push(new SingleValuedExpression() {Type = Expressi" +
                    "onType.EqualsTo,Value = equal});\r\n                    return this;\r\n            " +
                    "    }\r\n\r\n                public NumberFilter<TP, T> GraterThan(T graterThan)\r\n  " +
                    "              {\r\n                    if (Expressions.Count > 0 && Expressions.Pe" +
                    "ek().Type != ExpressionType.Or)\r\n                        Expressions.Push(new Ex" +
                    "pression { Type = ExpressionType.And });\r\n                    Expressions.Push(n" +
                    "ew SingleValuedExpression() { Type = ExpressionType.GraterThan, Value = graterTh" +
                    "an });\r\n                    return this;\r\n                }\r\n\r\n                p" +
                    "ublic NumberFilter<TP, T> LessThan(T lessThan)\r\n                {\r\n             " +
                    "       if (Expressions.Count > 0 && Expressions.Peek().Type != ExpressionType.Or" +
                    ")\r\n                        Expressions.Push(new Expression { Type = ExpressionTy" +
                    "pe.And });\r\n                    Expressions.Push(new SingleValuedExpression() { " +
                    "Type = ExpressionType.LessThan, Value = lessThan });\r\n                    return" +
                    " this;\r\n                }\r\n\r\n                public NumberFilter<TP,T> Or\r\n     " +
                    "           {\r\n                    get\r\n                    {\r\n                  " +
                    "      if (Expressions.Peek().Type == ExpressionType.Or)\r\n                       " +
                    "     return this;\r\n                        Expressions.Push(new Expression { Typ" +
                    "e = ExpressionType.Or });\r\n                        return this;\r\n               " +
                    "     }\r\n                }\r\n\r\n                public NumberFilter<TP, T> OrderByT" +
                    "his()\r\n                {\r\n                    Expressions.Push(new SingleValuedE" +
                    "xpression() { Type = ExpressionType.OrderByThis,Value = \"\" });\r\n                " +
                    "    return this;\r\n                }\r\n\r\n                public NumberFilter<TP, T" +
                    "> OrderByThisDescending()\r\n                {\r\n                    Expressions.Pu" +
                    "sh(new SingleValuedExpression() { Type = ExpressionType.OrderByThis, Value = \" D" +
                    "ECS \" });\r\n                    return this;\r\n                }\r\n\r\n              " +
                    "  public TP Parent { get; }\r\n            }\r\n\t\t}\r\n\r\n\t\tnamespace ObjectFilters\r\n\t\t" +
                    "{\r\n\t\t\t");
            
            #line 536 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
foreach(var table in schema.Tables ){
			var tableName = table.Name;
			
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\tpublic class ");
            
            #line 540 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Filter\r\n\t\t\t{\r\n\t\t\t\tinternal readonly Stack<Filter> Filters = new Stack<Filter>(); " +
                    "\r\n\r\n\t\t\t\t");
            
            #line 544 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
foreach(var column in table.Columns){
					var dataType = column.DataType.NetDataTypeCSharpName;
				
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 548 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
if(dataType == "string"){
            
            #line default
            #line hidden
            this.Write("\t\t\t\tpublic StringFilter<");
            
            #line 549 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Filter> ");
            
            #line 549 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write(@"
				{
					get
					{
						if(Filters.Count>0 &&  (Filters.Peek() is ValueFilter))
						{
							var valueFilter = Filters.Peek() as ValueFilter;
							valueFilter?.Expressions.Push(new Expression {Type = ExpressionType.And});
						}

						Filters.Push(new AndFilter());
						var filter = new StringFilter<");
            
            #line 560 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Filter>(this,\"");
            
            #line 560 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t\t\t\t\t\tFilters.Push(filter);\r\n\t\t\t\t\t\treturn filter;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t");
            
            #line 565 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
} else if(dataType == "int" || dataType == "short" || dataType == "long" || dataType == "double" || dataType == "decimal" ||  dataType == "float" ){
            
            #line default
            #line hidden
            this.Write("\t\t\t\tpublic NumberFilter<");
            
            #line 566 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Filter,int> ");
            
            #line 566 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t{\r\n\t\t\t\t\tget\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tFilters.Push(new AndFilter());\r\n\t\t\t\t\t\tvar filter" +
                    " = new NumberFilter<");
            
            #line 571 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Filter,int>(this,\"");
            
            #line 571 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t\t\t\t\t\tFilters.Push(filter);\r\n\t\t\t\t\t\treturn filter;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t");
            
            #line 576 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 577 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\tpublic ");
            
            #line 578 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Filter Or\r\n\t\t\t\t{\r\n\t\t\t\t\tget\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (Filters.Peek() is OrFilter)\r\n\t\t\t\t\t\t" +
                    "\treturn this;\r\n\r\n\t\t\t\t\t\tFilters.Push(new OrFilter());\r\n\t\t\t\t\t\treturn this;\r\n\t\t\t\t\t}" +
                    "\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpublic List<");
            
            #line 590 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("> Filter(int limit = 0)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn ");
            
            #line 592 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(".Filter(Filters,limit);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t");
            
            #line 595 "F:\Projects\CGen\CGen\Templates\DALTemplate.tt"
} /*for each table */
            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\t}\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class DALTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
